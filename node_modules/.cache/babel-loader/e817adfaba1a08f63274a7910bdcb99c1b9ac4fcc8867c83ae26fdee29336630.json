{"ast":null,"code":"import { Vector, getRandom } from \"tsparticles-engine\";\nexport class PolygonPathGenerator {\n  constructor() {\n    this._createDirs = () => {\n      this.dirsList = [];\n      for (let i = 0; i < 360; i += 360 / this.options.sides) {\n        const angle = this.options.angle + i;\n        this.dirsList.push(Vector.create(Math.cos(angle * Math.PI / 180), Math.sin(angle * Math.PI / 180)));\n      }\n    };\n    this.dirsList = [];\n    this.options = {\n      sides: 6,\n      turnSteps: 20,\n      angle: 30\n    };\n  }\n  generate(p) {\n    const {\n      sides\n    } = this.options;\n    if (p.hexStep === undefined) {\n      p.hexStep = 0;\n    }\n    if (p.hexDirection === undefined) {\n      p.hexDirection = sides === 6 ? (getRandom() * 3 | 0) * 2 : getRandom() * sides | 0;\n    }\n    if (p.hexSpeed === undefined) {\n      p.hexSpeed = p.velocity.length;\n    }\n    if (p.hexStep % this.options.turnSteps === 0) {\n      p.hexDirection = getRandom() > 0.5 ? (p.hexDirection + 1) % sides : (p.hexDirection + sides - 1) % sides;\n    }\n    p.velocity.x = 0;\n    p.velocity.y = 0;\n    p.hexStep++;\n    const direction = this.dirsList[p.hexDirection];\n    return Vector.create(direction.x * p.hexSpeed, direction.y * p.hexSpeed);\n  }\n  init(container) {\n    const options = container.actualOptions.particles.move.path.options;\n    this.options.sides = options.sides > 0 ? options.sides : 6;\n    this.options.angle = options.angle ?? 30;\n    this.options.turnSteps = options.turnSteps >= 0 ? options.turnSteps : 20;\n    this._createDirs();\n  }\n  reset(particle) {\n    delete particle.hexStep;\n    delete particle.hexDirection;\n    delete particle.hexSpeed;\n  }\n  update() {}\n}","map":{"version":3,"names":["Vector","getRandom","PolygonPathGenerator","constructor","_createDirs","dirsList","i","options","sides","angle","push","create","Math","cos","PI","sin","turnSteps","generate","p","hexStep","undefined","hexDirection","hexSpeed","velocity","length","x","y","direction","init","container","actualOptions","particles","move","path","reset","particle","update"],"sources":["/Users/sahinyaakila/Desktop/portfolio-website/node_modules/tsparticles-path-polygon/esm/PolygonPathGenerator.js"],"sourcesContent":["import { Vector, getRandom } from \"tsparticles-engine\";\nexport class PolygonPathGenerator {\n    constructor() {\n        this._createDirs = () => {\n            this.dirsList = [];\n            for (let i = 0; i < 360; i += 360 / this.options.sides) {\n                const angle = this.options.angle + i;\n                this.dirsList.push(Vector.create(Math.cos((angle * Math.PI) / 180), Math.sin((angle * Math.PI) / 180)));\n            }\n        };\n        this.dirsList = [];\n        this.options = {\n            sides: 6,\n            turnSteps: 20,\n            angle: 30,\n        };\n    }\n    generate(p) {\n        const { sides } = this.options;\n        if (p.hexStep === undefined) {\n            p.hexStep = 0;\n        }\n        if (p.hexDirection === undefined) {\n            p.hexDirection = sides === 6 ? ((getRandom() * 3) | 0) * 2 : (getRandom() * sides) | 0;\n        }\n        if (p.hexSpeed === undefined) {\n            p.hexSpeed = p.velocity.length;\n        }\n        if (p.hexStep % this.options.turnSteps === 0) {\n            p.hexDirection = getRandom() > 0.5 ? (p.hexDirection + 1) % sides : (p.hexDirection + sides - 1) % sides;\n        }\n        p.velocity.x = 0;\n        p.velocity.y = 0;\n        p.hexStep++;\n        const direction = this.dirsList[p.hexDirection];\n        return Vector.create(direction.x * p.hexSpeed, direction.y * p.hexSpeed);\n    }\n    init(container) {\n        const options = container.actualOptions.particles.move.path.options;\n        this.options.sides = options.sides > 0 ? options.sides : 6;\n        this.options.angle = options.angle ?? 30;\n        this.options.turnSteps = options.turnSteps >= 0 ? options.turnSteps : 20;\n        this._createDirs();\n    }\n    reset(particle) {\n        delete particle.hexStep;\n        delete particle.hexDirection;\n        delete particle.hexSpeed;\n    }\n    update() {\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}